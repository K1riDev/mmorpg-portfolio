---
import { useTranslation } from '@/i18n/utils';
import { type Language } from '@/i18n/translations';
import ThemeToggle from './ThemeToggle.astro';
import LanguageSwitcher from './LanguageSwitcher.astro';
import { getIcon } from '@/lib/icons';

export interface Props {
  lang?: Language;
  currentPath?: string;
}

const { lang = 'es', currentPath = '/' } = Astro.props;
const { t } = useTranslation(lang);

const navItems = [
  { href: lang === 'es' ? '/' : '/en', label: t.nav.home, icon: 'sword' },
  { href: lang === 'es' ? '/about' : '/en/about', label: t.nav.about, icon: 'shield' },
  { href: lang === 'es' ? '/projects' : '/en/projects', label: t.nav.projects, icon: 'castle' },
  { href: lang === 'es' ? '/resume' : '/en/resume', label: t.nav.resume, icon: 'scroll' },
  { href: lang === 'es' ? '/contact' : '/en/contact', label: t.nav.contact, icon: 'gem' },
];
---

<nav class="fixed top-0 left-0 right-0 z-40 nav-glass">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo/Brand -->
      <a href={lang === 'es' ? '/' : '/en'} class="flex items-center space-x-3 group">
        <div class="w-10 h-10 rounded-full bg-gradient-to-br from-yellow-400 to-amber-500 flex items-center justify-center glow-effect group-hover:glow-effect-secondary transition-all duration-300">
          <span class="text-xl font-bold font-orbitron">K</span>
        </div>
        <span class="font-cinzel text-xl font-bold text-glow-sm">KiriDev</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`group relative px-4 py-2 rounded-lg font-orbitron text-sm font-medium transition-all duration-300 ${
              currentPath === item.href
                ? 'text-yellow-400 glow-effect'
                : 'text-gray-300 hover:text-yellow-400'
            }`}
          >
            <span class="relative z-10 flex items-center space-x-1.5">
              <div class="w-4 h-4 flex-shrink-0 inline-flex items-center justify-center" set:html={getIcon(item.icon as any)}></div>
              <span class="leading-none">{item.label}</span>
            </span>

            <!-- Hover effect background -->
            <div class="absolute inset-0 bg-gradient-to-r from-cyan-400/10 to-purple-500/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

            <!-- Active indicator -->
            {currentPath === item.href && (
              <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-6 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-500 glow-effect"></div>
            )}
          </a>
        ))}
      </div>

      <!-- Controls -->
      <div class="flex items-center space-x-3">
        <LanguageSwitcher lang={lang} currentPath={currentPath} />
        <ThemeToggle />

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg border border-yellow-400/30 hover:border-yellow-400 transition-colors"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-yellow-400/30 py-4">
      <div class="space-y-2">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`flex items-center space-x-2.5 px-4 py-3 rounded-lg font-orbitron text-sm font-medium transition-all duration-300 ${
              currentPath === item.href
                ? 'text-yellow-400 bg-yellow-400/10 glow-effect'
                : 'text-gray-300 hover:text-yellow-400 hover:bg-yellow-400/5'
            }`}
          >
            <div class="w-4 h-4 flex-shrink-0 inline-flex items-center justify-center" set:html={getIcon(item.icon as any)}></div>
            <span class="leading-none">{item.label}</span>
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');

    if (button && menu) {
      button.addEventListener('click', () => {
        menu.classList.toggle('hidden');
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target as Node) && !menu.contains(e.target as Node)) {
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>
