---
import Layout from "@/layouts/Layout.astro";
import Navbar from "@/components/Navbar.astro";
import { useTranslation } from "@/i18n/utils";
import { getLanguageIcon } from "@/lib/icons";
import { getIcon } from "@/lib/icons";

const { t } = useTranslation("en");
---

<Layout
  title="About KiriDev - Frontend Developer"
  description="Learn more about KiriDev, frontend developer passionate about creating exceptional interfaces. Experience in React, Vue, TypeScript and modern technologies."
  lang="en"
  type="profile"
>
  <Navbar lang="en" currentPath="/en/about" />

  <main class="min-h-screen pt-24 pb-16">
    <div class="container mx-auto px-6">
      <!-- Page Header -->
      <div class="text-center mb-16">
        <h1 class="text-5xl md:text-6xl font-cinzel font-bold mb-6">
          <span
            class="bg-gradient-to-r from-yellow-400 to-amber-500 bg-clip-text text-transparent"
          >
            {t.about.title}
          </span>
        </h1>
        <div
          class="w-24 h-1 bg-gradient-to-r from-yellow-400 to-amber-500 mx-auto"
        >
        </div>
      </div>

      <div class="grid lg:grid-cols-2 gap-12 items-start">
        <!-- Character Info Panel -->
        <div class="mmorpg-card">
          <div class="text-center mb-8">
            <!-- Avatar/Character -->
            <div class="w-32 h-32 mx-auto mb-6 relative">
              <div
                class="w-full h-full rounded-full bg-gradient-to-br from-yellow-400 to-amber-500 p-1"
              >
                <div
                  class="w-full h-full rounded-full bg-black flex items-center justify-center"
                >
                  <span class="text-4xl font-orbitron font-bold text-yellow-400"
                    >KD</span
                  >
                </div>
              </div>
              <!-- Level indicator -->
              <div
                class="absolute -bottom-2 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-yellow-400 to-orange-400 text-black px-3 py-1 rounded-full text-sm font-orbitron font-bold"
              >
                LVL 3
              </div>
            </div>

            <h2 class="text-2xl font-cinzel font-bold text-yellow-400 mb-2">
              KiriDev
            </h2>
            <p class="text-amber-400 font-orbitron">Frontend Developer</p>
          </div>

          <!-- Character Stats -->
          <div class="space-y-4" data-skills>
            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("JavaScript")} />
                <span class="font-orbitron text-yellow-400">JavaScript</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-yellow-400 to-orange-400 h-2 rounded-full skill-progress"
                  data-width="90"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">90%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("React")} />
                <span class="font-orbitron text-amber-400">React</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-amber-400 to-yellow-500 h-2 rounded-full skill-progress"
                  data-width="85"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">85%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("Node.js")} />
                <span class="font-orbitron text-green-400">Node.js</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-green-400 to-emerald-400 h-2 rounded-full skill-progress"
                  data-width="70"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">70%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("TypeScript")} />
                <span class="font-orbitron text-orange-400">TypeScript</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-orange-400 to-red-400 h-2 rounded-full skill-progress"
                  data-width="80"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">80%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("Vue")} />
                <span class="font-orbitron text-green-500">Vue</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full skill-progress"
                  data-width="75"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">75%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("Python")} />
                <span class="font-orbitron text-blue-400">Python</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-blue-400 to-indigo-400 h-2 rounded-full skill-progress"
                  data-width="65"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">65%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("CSS")} />
                <span class="font-orbitron text-cyan-400">CSS</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-cyan-400 to-blue-400 h-2 rounded-full skill-progress"
                  data-width="88"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">88%</span>
            </div>

            <div class="flex justify-between items-center skill-bar">
              <div class="flex items-center space-x-2">
                <div set:html={getLanguageIcon("Astro")} />
                <span class="font-orbitron text-purple-400">Astro</span>
              </div>
              <div class="flex-1 mx-4 bg-gray-800 rounded-full h-2">
                <div
                  class="bg-gradient-to-r from-purple-400 to-pink-400 h-2 rounded-full skill-progress"
                  data-width="82"
                >
                </div>
              </div>
              <span class="font-orbitron text-xs text-gray-400">82%</span>
            </div>
          </div>

          <!-- Currently Learning section in character panel -->
          <div class="mt-8 pt-6 border-t border-slate-700">
            <h4
              class="text-lg font-cinzel font-bold text-orange-400 mb-4 flex items-center"
            >
              <div class="text-orange-400 mr-3" set:html={getIcon("book")} />
              {t.about.learning}
            </h4>
            <div class="space-y-3">
              {
                [
                  "Backend Development",
                  "Database Design",
                  "DevOps",
                  "System Architecture",
                ].map((item) => (
                  <div class="flex items-center space-x-3 p-3 rounded-lg border border-orange-400/30 hover:border-orange-400 transition-colors">
                    <div class="w-2 h-2 bg-orange-400 rounded-full animate-pulse" />
                    <span class="font-orbitron text-sm">{item}</span>
                  </div>
                ))
              }
            </div>
          </div>
        </div>

        <!-- Story/Description -->
        <div class="space-y-8">
          <!-- Main description -->
          <div class="mmorpg-card">
            <h3
              class="text-2xl font-cinzel font-bold text-yellow-400 mb-4 flex items-center"
            >
              <div class="text-yellow-400 mr-3" set:html={getIcon("book")} />
              My Story
            </h3>
            <p class="text-gray-300 leading-relaxed font-cinzel">
              Hi, I'm Oscar, a passionate web developer with a degree in
              Microcomputer Systems and Networks from the University of
              Castilla-La Mancha. I'm dedicated to frontend development and
              continuously learning the latest technologies and trends in the
              field.
              <br /><br />
              I believe in maintaining a balanced lifestyle, combining my passion
              for coding with physical activities to stay healthy and focused. Programming,
              for me, is a powerful tool to create solutions that improve people's
              lives, and I'm always eager to take on new challenges and projects.
              <br /><br />
              I consider myself a calm person who enjoys life and values continuous
              learning. Every day brings new opportunities to grow, and I'm committed
              to delivering high-quality solutions that make a real difference.
            </p>
          </div>

          <!-- Skills section -->
          <div class="mmorpg-card">
            <h3
              class="text-2xl font-cinzel font-bold text-amber-400 mb-6 flex items-center"
            >
              <div class="text-amber-400 mr-3" set:html={getIcon("sword")} />
              {t.about.skills}
            </h3>

            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
              {
                [
                  { name: "JavaScript", icon: "JavaScript" },
                  { name: "TypeScript", icon: "TypeScript" },
                  { name: "React", icon: "React" },
                  { name: "Vue", icon: "Vue" },
                  { name: "Node.js", icon: "Node.js" },
                  { name: "Python", icon: "Python" },
                  { name: "CSS", icon: "CSS" },
                  { name: "Astro", icon: "Astro" },
                ].map((skill) => (
                  <div class="flex items-center space-x-3 p-3 rounded-lg bg-gray-800/50 hover:bg-gray-700/50 transition-colors">
                    <div
                      class="flex-shrink-0"
                      set:html={getLanguageIcon(skill.icon)}
                    />
                    <span class="font-orbitron text-sm">{skill.name}</span>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Tools Arsenal section -->
          <div class="mmorpg-card">
            <h3
              class="text-2xl font-cinzel font-bold text-cyan-400 mb-6 flex items-center"
            >
              <div class="text-cyan-400 mr-3" set:html={getIcon("hammer")} />
              {t.about.tools}
            </h3>

            <div
              class="flex justify-center items-center gap-3 lg:gap-4 flex-wrap"
            >
              {
                [
                  { name: "VS Code", icon: "vscode" },
                  { name: "Figma", icon: "figma" },
                  { name: "GitHub", icon: "github" },
                  { name: "IntelliJ IDEA", icon: "intellij" },
                  { name: "Git", icon: "git" },
                ].map((tool) => (
                  <div class="flex flex-col items-center justify-center w-20 h-20 p-2 rounded-lg bg-slate-700/50 hover:bg-slate-600/50 transition-colors group">
                    <div
                      class="flex-shrink-0 transform group-hover:scale-110 transition-transform duration-200 mb-1"
                      set:html={getIcon(tool.icon as any)}
                    />
                    <span class="font-orbitron text-xs text-center leading-tight">
                      {tool.name}
                    </span>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("DOMContentLoaded", () => {
    // Animate cards with a cool entrance effect
    gsap.from(".mmorpg-card", {
      duration: 1.2,
      scale: 0.8,
      rotation: -5,
      opacity: 0,
      stagger: 0.3,
      ease: "back.out(1.7)",
      scrollTrigger: {
        trigger: ".mmorpg-card",
        start: "top 80%",
        toggleActions: "play none none reverse",
      },
    });

    // Cool skill bars animation with bounce and glow effect
    const skillProgress = document.querySelectorAll(".skill-progress");
    const skillBars = document.querySelectorAll(".skill-bar");

    skillBars.forEach((skillBar, index) => {
      const progressBar = skillBar.querySelector(".skill-progress");
      if (!progressBar) return;

      const targetWidth = progressBar.getAttribute("data-width");
      const percentage = skillBar.querySelector(".font-orbitron.text-xs");
      if (!targetWidth) return;

      // Set initial states
      gsap.set(progressBar, { width: "0%", scale: 0.8 });
      if (percentage) gsap.set(percentage, { opacity: 0, scale: 0 });

      // Create timeline for each skill bar
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: skillBar,
          start: "top 85%",
          toggleActions: "play none none reverse",
        },
      });

      // Animate the skill bar with bounce effect
      tl.to(progressBar, {
        width: `${targetWidth}%`,
        scale: 1,
        duration: 1.5,
        ease: "elastic.out(1, 0.5)",
        delay: index * 0.15,
      });
      // Animate percentage with pop effect
      if (percentage) {
        tl.to(
          percentage,
          {
            opacity: 1,
            scale: 1,
            duration: 0.6,
            ease: "back.out(2)",
          },
          "-=0.8"
        );
      }
      // Add a subtle glow pulse
      tl.to(
        progressBar,
        {
          boxShadow: "0 0 20px rgba(251, 191, 36, 0.5)",
          duration: 0.3,
          yoyo: true,
          repeat: 1,
          ease: "power2.inOut",
        },
        "-=0.3"
      );
    });

    // Interactive hover effects with morphing
    skillBars.forEach((skillBar) => {
      const progressBar = skillBar.querySelector(".skill-progress");

      skillBar.addEventListener("mouseenter", () => {
        gsap.to(skillBar, {
          scale: 1.05,
          duration: 0.4,
          ease: "power2.out",
        });

        gsap.to(progressBar, {
          height: "8px",
          boxShadow: "0 0 15px rgba(251, 191, 36, 0.7)",
          duration: 0.4,
          ease: "power2.out",
        });
      });

      skillBar.addEventListener("mouseleave", () => {
        gsap.to(skillBar, {
          scale: 1,
          duration: 0.4,
          ease: "power2.out",
        });

        gsap.to(progressBar, {
          height: "8px",
          boxShadow: "none",
          duration: 0.4,
          ease: "power2.out",
        });
      });
    });

    // Animate character avatar with floating effect
    const avatar = document.querySelector(".w-32.h-32");
    if (avatar) {
      gsap.to(avatar, {
        y: -10,
        duration: 2,
        ease: "power2.inOut",
        yoyo: true,
        repeat: -1,
      });
    }

    // Animate level indicator with pulse
    const levelIndicator = document.querySelector(".absolute.-bottom-2");
    if (levelIndicator) {
      gsap.to(levelIndicator, {
        scale: 1.1,
        duration: 1.5,
        ease: "power2.inOut",
        yoyo: true,
        repeat: -1,
      });
    }
  });
</script>
